generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_POSTGRES_PRISMA_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  password      String
  phone         String?
  emailVerified DateTime?
  image         String?
  role          String        @default("user")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  appointments  Appointment[]
}

model Masseur {
  id           String        @id @default(cuid())
  name         String
  image        String?
  imageScale   Float?        @default(1.0)
  imageX       Float?        @default(0.0)
  imageY       Float?        @default(0.0)
  cropX        Float?
  cropY        Float?
  cropWidth    Float?
  cropHeight   Float?
  description  String?
  experience   Int           @default(0)
  isActive     Boolean       @default(true)
  sortOrder    Int           @default(999)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  services     Service[]     @relation("MasseurToService")
  appointments Appointment[]
}

model Service {
  id                     String               @id @default(cuid())
  name                   String
  description            String?
  price                  Float
  duration               Int
  type                   String               @default("SINGLE")
  category               String               @default("MASSAGE")
  isActive               Boolean              @default(true)
  isRecommend            Boolean              @default(false)
  sortOrder              Int                  @default(999)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  flashSaleNote          String?
  isFlashSale            Boolean              @default(false)
  isLimitedTime          Boolean              @default(false)
  limitedEndDate         DateTime?
  limitedStartDate       DateTime?
  limitedDiscountPercent Int?
  limitedNote            String?
  limitedSpecialPrice    Float?
  recommendOrder         Int                  @default(0)
  packageItems           PackageItem[]
  addons                 ServiceAddon[]
  areaPrices             ServiceAreaPrice[]
  durations              ServiceDuration[]
  genderPrices           ServiceGenderPrice[]
  masseurs               Masseur[]            @relation("MasseurToService")
  customOptions          CustomOption[]
  appointments           Appointment[]
}

model ServiceDuration {
  id           String        @id @default(cuid())
  duration     Int
  price        Float
  serviceId    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  service      Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

model ServiceGenderPrice {
  id          String   @id @default(cuid())
  gender      Gender
  price       Float
  serviceName String?
  serviceId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, gender])
}

model ServiceAreaPrice {
  id          String   @id @default(cuid())
  areaName    String
  price       Float
  gender      Gender?
  description String?
  serviceId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, areaName, gender])
}

model ServiceAddon {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  isRequired  Boolean  @default(false)
  serviceId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model ServicePackage {
  id          String          @id @default(cuid())
  name        String
  description String?
  price       Float
  duration    Int
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  items       PackageItem[]
  options     PackageOption[]
}

model PackageItem {
  id             String         @id @default(cuid())
  serviceId      String
  duration       Int
  isRequired     Boolean        @default(true)
  bodyPart       String?        // 部位
  customDuration Int?           // 自定義時長
  customPrice    Float?         // 自定義價格
  packageId      String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  servicePackage ServicePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  service        Service        @relation(fields: [serviceId], references: [id])
}

model PackageOption {
  id             String         @id @default(cuid())
  name           String
  description    String?
  maxSelections  Int            @default(1)
  packageId      String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  items          OptionItem[]
  servicePackage ServicePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
}

model OptionItem {
  id              String        @id @default(cuid())
  name            String
  packageOptionId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  packageOption   PackageOption @relation(fields: [packageOptionId], references: [id], onDelete: Cascade)
}

model CustomOption {
  id             String   @id @default(cuid())
  bodyPart       String?  // 部位（選填）
  customDuration Int?     // 自定義時長（選填）
  customPrice    Float?   // 自定義價格（選填）
  serviceId      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  service        Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

// 預約模型
model Appointment {
  id                String          @id @default(cuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id])
  serviceId         String
  service           Service         @relation(fields: [serviceId], references: [id])
  serviceDurationId String
  serviceDuration   ServiceDuration @relation(fields: [serviceDurationId], references: [id])
  masseurId         String
  masseur           Masseur         @relation(fields: [masseurId], references: [id])
  date              String          // YYYY-MM-DD 格式
  time              String          // HH:MM 格式
  status            String          @default("PENDING") // PENDING, CONFIRMED, COMPLETED, CANCELLED, NO_SHOW
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([userId])
  @@index([masseurId])
  @@index([date])
  @@index([status])
}

enum Gender {
  MALE
  FEMALE
}
